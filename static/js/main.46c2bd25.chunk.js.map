{"version":3,"sources":["doomsday_logo.png","HomePage.jsx","utils.js","slides/Step1Slides.jsx","Step1Page.jsx","slides/Step2Slides.jsx","Step2Page.jsx","slides/Step3Slides.jsx","Step3Page.jsx","slides/Step4Slides.jsx","Step4Page.jsx","slides/Step5Slides.jsx","Step5Page.jsx","slides/Step6Slides.jsx","Step6Page.jsx","slides/Step7Slides.jsx","Step7Page.jsx","LearnSections.jsx","TrainPage.jsx","AboutPage.jsx","App.js","reportWebVitals.js","index.js"],"names":["HomePage","className","href","target","rel","src","logo","alt","style","textDecoration","Tooltip","title","placement","Button","variant","marginBottom","size","fontSize","position","bottom","right","color","randInt","lower","upper","Math","floor","random","isLeapYear","year","getRandDate","month","computeDayOfWeek","day","includes","getDoomsdays","leapYearOffset","addLeadingZero","dayOrMonth","allDays","allMonths","Step1Slides","useState","slideIndex","setSlideIndex","setTest","quizFieldValues","setQuizFieldValues","useEffect","showSlides","n","i","slides","document","getElementsByClassName","dots","length","display","replace","textIndent","minDate","Date","view","showNeighboringMonth","tileDisabled","activeStartDate","date","getFullYear","getMonth","getDate","map","index","doomsdays","TextField","label","error","toString","helperText","onChange","e","newQuizFieldValues","value","id","onClick","max","min","Step1Page","Step2Slides","allYears","answers","currentYear","leapDay","Step2Page","Step3Slides","allNumbers","number","toLowerCase","Step3Page","Step4Slides","allDates","Step4Page","Step5Slides","currentDate","Step5Page","allCenturies","century","console","log","Step6Page","Step6Slides","Step7Page","Step7Slides","TableOfContents","text","urlPath","LinkListItem","to","LearnSections","match","useRouteMatch","path","TrainPage","setDate","score","setScore","highScore","setHighScore","now","lastAnsweredTime","setLastAnsweredTime","avgTime","setAvgTime","numAnswered","setNumAnswered","ButtonGroup","orientation","aria-label","dayOfWeek","timeToAnswer","newNumAnswered","newAvgTime","newScore","alert","newDate","left","toFixed","AboutPage","App","relativePath","window","location","AppBar","Toolbar","background","IconButton","edge","width","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.46c2bd25.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/doomsday_logo.c3df842e.png\";","import logo from \"./doomsday_logo.png\";\nimport Button from \"@material-ui/core/Button\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport HelpOutlineIcon from \"@material-ui/icons/HelpOutline\";\n\nconst HomePage = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <a\n          className=\"Info-link\"\n          href=\"https://en.wikipedia.org/wiki/Doomsday_rule\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </a>\n        <p>Become a human calendar</p>\n        <a href=\"learn\" style={{ textDecoration: \"none\" }}>\n          <Tooltip title=\"Learn the theory\" placement=\"right\">\n            <Button\n              variant=\"outlined\"\n              style={{ marginBottom: \"32px\" }}\n              size=\"large\"\n            >\n              Learn\n            </Button>\n          </Tooltip>\n        </a>\n        <a href=\"train\" style={{ textDecoration: \"none\" }}>\n          <Tooltip title=\"Practice the Algorithm\" placement=\"right\">\n            <Button variant=\"outlined\" size=\"large\">\n              Train\n            </Button>\n          </Tooltip>\n        </a>\n        <a href=\"about\" style={{ textDecoration: \"none\" }}>\n          <Tooltip title=\"About\" placement=\"left\">\n            <HelpOutlineIcon\n              fontSize=\"large\"\n              style={{\n                position: \"fixed\",\n                bottom: 20,\n                right: 20,\n                color: \"black\",\n              }}\n            />\n          </Tooltip>\n        </a>\n      </header>\n    </div>\n  );\n};\n\nexport default HomePage;\n","export const randInt = (lower, upper) => {\n  return Math.floor(Math.random() * (upper - lower)) + lower;\n};\n\nexport const isLeapYear = (year) => {\n  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n};\n\nexport const getRandDate = () => {\n  var year = randInt(1700, 2099);\n  var month = randInt(1, 12);\n  var day = 0;\n\n  if (month === 2) {\n    if (isLeapYear(year)) {\n      day = randInt(1, 29);\n    } else {\n      day = randInt(1, 28);\n    }\n  } else if (month in [9, 4, 6, 11]) {\n    day = randInt(1, 30);\n  } else {\n    day = randInt(1, 31);\n  }\n\n  return [month, day, year];\n};\n\nexport const computeDayOfWeek = (month, day, year) => {\n  var step_1 = Math.floor((year % 100) / 4);\n  var step_2 = step_1 + day;\n  var step_3 = step_2 + [4, 2, 0, 6][Math.floor(year / 100) - 17];\n  var step_4 = step_3 + [1, 4, 4, 0, 2, 5, 0, 3, 6, 1, 4, 6][month - 1];\n  var step_5 = step_4 - (isLeapYear(year) && [1, 2].includes(month) ? 1 : 0);\n  var step_6 = step_5 + (year % 100);\n  var step_7 = step_6 % 7;\n  return (\n    [\"Satur\", \"Sun\", \"Mon\", \"Tues\", \"Wednes\", \"Thurs\", \"Fri\"][step_7] + \"day\"\n  );\n};\n\nexport const getDoomsdays = (year) => {\n  const leapYearOffset = isLeapYear(year) ? 1 : 0;\n\n  return [\n    3 + leapYearOffset,\n    28 + leapYearOffset,\n    14,\n    4,\n    9,\n    6,\n    11,\n    8,\n    5,\n    10,\n    7,\n    12,\n  ];\n};\n\nexport const addLeadingZero = (dayOrMonth) =>\n  dayOrMonth < 10 ? `0${dayOrMonth}` : `${dayOrMonth}`;\n\nexport const allDays = [\n  \"Sunday\",\n  \"Monday\",\n  \"Tuesday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\",\n];\n\nexport const allMonths = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\",\n];\n","import { useEffect, useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\n\nimport Calendar from \"react-calendar\";\n\nimport { getDoomsdays, allMonths } from \"../utils.js\";\n\nconst Step1Slides = () => {\n  const [slideIndex, setSlideIndex] = useState(0);\n  const [test, setTest] = useState(\"\");\n  const [quizFieldValues, setQuizFieldValues] = useState([\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n  ]);\n\n  useEffect(() => {\n    showSlides(slideIndex);\n  });\n\n  const showSlides = (n) => {\n    var i;\n    var slides = document.getElementsByClassName(\"mySlides\");\n    var dots = document.getElementsByClassName(\"dot\");\n\n    for (i = 0; i < slides.length; i++) {\n      slides[i].style.display = \"none\";\n    }\n    for (i = 0; i < dots.length; i++) {\n      dots[i].className = dots[i].className.replace(\" active\", \"\");\n    }\n    slides[slideIndex].style.display = \"block\";\n    dots[slideIndex].className += \" active\";\n  };\n\n  return (\n    <div>\n      <div className=\"slideshow-container\">\n        <div className=\"mySlides\">\n          <div className=\"Slide-paragraph-block\">\n            <h2 style={{ color: \"black\" }}>\n              <b>\n                <u>Doomsdays</u>\n              </b>\n            </h2>\n            <p>\n              {\" \"}\n              Every year has a specific day of the week, known as{\" \"}\n              <b>Doomsday</b> that can help simplify the way one can think about\n              the calendar{\" \"}\n            </p>\n            <p>\n              {\" \"}\n              This day is defined as being the day of the week that the last day\n              of February falls on{\" \"}\n            </p>\n            <p style={{ textIndent: \"50px\" }}>\n              e.g. the Doomsday for 2021 is{\" \"}\n              <Tooltip\n                title=\"(since February 28th, 2021\n              was a Sunday)\"\n                placement=\"right\"\n              >\n                <span>\n                  <u>Sunday</u>\n                </span>\n              </Tooltip>\n            </p>\n            <p style={{ textIndent: \"50px\" }}>\n              e.g. similarly, the Doomsday for 2020 is{\" \"}\n              <Tooltip\n                title=\"(since February 29th, 2020 was a Saturday)\"\n                placement=\"right\"\n              >\n                <span>\n                  <u>Saturday</u>\n                </span>\n              </Tooltip>\n            </p>\n            <p>\n              One can think of other days where the day of the week matches the\n              Doomsday for a year as also being doomsdays\n            </p>\n            <p style={{ textIndent: \"50px\" }}>\n              {\" \"}\n              e.g. this means that <b>every</b> Sunday in 2021 is a doomsday{\" \"}\n            </p>\n            <p>\n              {\" \"}\n              We will memorize twelve dates that are guaranteed to be doomsdays\n              in any given year, one in each month{\" \"}\n            </p>\n            <p>\n              {\" \"}\n              To help commit them to memory, we will use{\" \"}\n              <a\n                className=\"Info-link\"\n                href=\"https://en.wikipedia.org/wiki/Mnemonic\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                {\" \"}\n                mnemonics\n              </a>\n            </p>\n          </div>\n        </div>\n\n        <div className=\"mySlides\">\n          <div className=\"Slide-paragraph-block\">\n            <h2 style={{ color: \"black\" }}>\n              <b>\n                <u>Memorize the Doomsdays</u>\n              </b>\n            </h2>\n            <p> Hover over a date to see a mnemonic to help remember it: </p>\n            <ul>\n              <li>\n                <Tooltip\n                  title=\"the 3rd 3 years in 4 and the 4th in the 4th\"\n                  placement=\"right\"\n                >\n                  <span> January 3rd (or 4th if it's a leap year) </span>\n                </Tooltip>\n              </li>\n              <li>\n                <Tooltip title=\"the last day of February\" placement=\"right\">\n                  <span> February 28th (or 29th if it's a leap year) </span>\n                </Tooltip>\n              </li>\n              <li>\n                <Tooltip title=\"Pi day\" placement=\"right\">\n                  <span> March 14th </span>\n                </Tooltip>\n              </li>\n              <li>\n                <Tooltip title=\"4/4, 6/6, 8/8, 10/10, 12/12\" placement=\"right\">\n                  <span> April 4th </span>\n                </Tooltip>\n              </li>\n              <li>\n                <Tooltip title=\"I work 9-to-5 at 7-11\" placement=\"right\">\n                  <span> May 9th </span>\n                </Tooltip>\n              </li>\n              <li>\n                <Tooltip title=\"4/4, 6/6, 8/8, 10/10, 12/12\" placement=\"right\">\n                  <span> June 6th </span>\n                </Tooltip>\n              </li>\n              <li>\n                <Tooltip title=\"I work 9-to-5 at 7-11\" placement=\"right\">\n                  <span> July 11th </span>\n                </Tooltip>\n              </li>\n              <li>\n                <Tooltip title=\"4/4, 6/6, 8/8, 10/10, 12/12\" placement=\"right\">\n                  <span> August 8th </span>\n                </Tooltip>\n              </li>\n              <li>\n                <Tooltip title=\"I work 9-to-5 at 7-11\" placement=\"right\">\n                  <span> September 5th </span>\n                </Tooltip>\n              </li>\n              <li>\n                <Tooltip title=\"4/4, 6/6, 8/8, 10/10, 12/12\" placement=\"right\">\n                  <span> October 10th </span>\n                </Tooltip>\n              </li>\n              <li>\n                <Tooltip title=\"I work 9-to-5 at 7-11\" placement=\"right\">\n                  <span> November 7th </span>\n                </Tooltip>\n              </li>\n              <li>\n                <Tooltip title=\"4/4, 6/6, 8/8, 10/10, 12/12\" placement=\"right\">\n                  <span> December 12th </span>\n                </Tooltip>\n              </li>\n            </ul>\n          </div>\n        </div>\n\n        <div className=\"mySlides\">\n          <div className=\"Slide-paragraph-block\">\n            <h2 style={{ color: \"black\" }}>\n              <b>\n                <u>Doomsdays</u>\n              </b>\n            </h2>\n            <p>\n              {\" \"}\n              Observe that the doomsdays always fall on the same day of the week\n              for any given year:{\" \"}\n            </p>\n            <Calendar\n              minDate={new Date(1700, 0, 1)}\n              view=\"month\"\n              showNeighboringMonth={false}\n              tileDisabled={({ activeStartDate, date, view }) => {\n                const doomsdays = getDoomsdays(date.getFullYear());\n                return !(doomsdays[date.getMonth()] === date.getDate());\n              }}\n            />\n          </div>\n        </div>\n\n        <div className=\"mySlides\">\n          <div className=\"Slide-paragraph-block\">\n            <h2 style={{ color: \"black\" }}>\n              <b>\n                <u>Quiz</u>\n              </b>\n            </h2>\n            <p>\n              {\" \"}\n              Enter the date of the memorized doomsday in each month for leap\n              years:{\" \"}\n            </p>\n            {allMonths.map((month, index) => {\n              const doomsdays = getDoomsdays(2020);\n              return (\n                <span>\n                  <TextField\n                    label={month}\n                    error={\n                      quizFieldValues[index] !== \"\" &&\n                      quizFieldValues[index] !== doomsdays[index].toString()\n                    }\n                    helperText={\n                      quizFieldValues[index] !== \"\" &&\n                      quizFieldValues[index] !== doomsdays[index].toString()\n                        ? \"Incorrect answer.\"\n                        : \"\"\n                    }\n                    onChange={(e) => {\n                      var newQuizFieldValues = quizFieldValues;\n                      newQuizFieldValues[index] = e.target.value;\n\n                      setQuizFieldValues(newQuizFieldValues);\n                      setTest(e.target.value);\n                    }}\n                    id={month}\n                    variant=\"outlined\"\n                  />{\" \"}\n                </span>\n              );\n            })}\n          </div>\n        </div>\n\n        <div\n          className=\"prev\"\n          onClick={() => setSlideIndex(Math.max(slideIndex - 1, 0))}\n        >\n          ❮\n        </div>\n        <div\n          className=\"next\"\n          onClick={() => setSlideIndex(Math.min(slideIndex + 1, 3))}\n        >\n          ❯\n        </div>\n      </div>\n\n      <div className=\"dot-container\">\n        <span className=\"dot\" onClick={() => setSlideIndex(0)}></span>\n        <span className=\"dot\" onClick={() => setSlideIndex(1)}></span>\n        <span className=\"dot\" onClick={() => setSlideIndex(2)}></span>\n        <span className=\"dot\" onClick={() => setSlideIndex(3)}></span>\n      </div>\n    </div>\n  );\n};\n\nexport default Step1Slides;\n","import Step1Slides from \"./slides/Step1Slides\";\n\nconst Step1Page = () => {\n  return (\n    <div className=\"General-app-text-content App-page-with-bar\">\n      <Step1Slides />;\n    </div>\n  );\n};\n\nexport default Step1Page;\n","import { useEffect, useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\n\nimport Calendar from \"react-calendar\";\n\nimport { isLeapYear } from \"../utils.js\";\n\nconst Step2Slides = () => {\n  const [slideIndex, setSlideIndex] = useState(0);\n  const [test, setTest] = useState(\"\");\n  const [quizFieldValues, setQuizFieldValues] = useState([\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n  ]);\n\n  useEffect(() => {\n    showSlides(slideIndex);\n  });\n\n  const allYears = [\n    1978,\n    1754,\n    1800,\n    2048,\n    2100,\n    1813,\n    2000,\n    1733,\n    1916,\n    2021,\n    1945,\n    2010,\n  ];\n  const answers = allYears.map((year) => (isLeapYear(year) ? 29 : 28));\n\n  const today = new Date();\n  const currentYear = today.getFullYear();\n\n  const showSlides = (n) => {\n    var i;\n    var slides = document.getElementsByClassName(\"mySlides\");\n    var dots = document.getElementsByClassName(\"dot\");\n\n    for (i = 0; i < slides.length; i++) {\n      slides[i].style.display = \"none\";\n    }\n    for (i = 0; i < dots.length; i++) {\n      dots[i].className = dots[i].className.replace(\" active\", \"\");\n    }\n    slides[slideIndex].style.display = \"block\";\n    dots[slideIndex].className += \" active\";\n  };\n\n  return (\n    <div>\n      <div className=\"slideshow-container\">\n        <div className=\"mySlides\">\n          <div className=\"Slide-paragraph-block\">\n            <h2 style={{ color: \"black\" }}>\n              <b>\n                <u>Leap Years</u>\n              </b>\n            </h2>\n            <p>\n              {\" \"}\n              A <b>leap year</b> is a year that is a multiple of 4{\" \"}\n            </p>\n            <p style={{ textIndent: \"50px\" }}>\n              {\" \"}\n              e.g. 2016, 1984, 1836 are leap years\n            </p>\n            <p>\n              {\" \"}\n              ...unless the year is a multiple of 100, in which case it is{\" \"}\n              <b>not</b> a leap year{\" \"}\n            </p>\n            <p style={{ textIndent: \"50px\" }}>\n              {\" \"}\n              e.g. 1700, 1800, 1900 are not leap years\n            </p>\n            <p>\n              {\" \"}\n              ...but if the year is a multiple of 400, it <b>is</b> a leap year\n              after all{\" \"}\n            </p>\n            <p style={{ textIndent: \"50px\" }}>\n              {\" \"}\n              e.g. 2000, 2400, 1600 are leap years\n            </p>\n          </div>\n        </div>\n\n        <div className=\"mySlides\">\n          <div className=\"Slide-paragraph-block\">\n            <h2 style={{ color: \"black\" }}>\n              <b>\n                <u>Techniques for determining if a year is leap</u>\n              </b>\n            </h2>\n            <p>\n              A number is a multiple of 4 if its last two digits are a multiple\n              of 4\n            </p>\n            <p style={{ textIndent: \"50px\" }}>\n              {\" \"}\n              e.g. The last two digits of{\" \"}\n              <Tooltip title=\"16 = 4 x 4\" placement=\"top\">\n                <span>\n                  20<u>16</u>\n                </span>\n              </Tooltip>\n              ,{\" \"}\n              <Tooltip title=\"84 = 4 x 21\" placement=\"top\">\n                <span>\n                  19<u>84</u>\n                </span>\n              </Tooltip>\n              ,{\" \"}\n              <Tooltip title=\"36 = 4 x 9\" placement=\"top\">\n                <span>\n                  18<u>36</u>\n                </span>\n              </Tooltip>{\" \"}\n              are all multiples of 4\n            </p>\n            <p>A number is a multiple of 100 if its last two digits are 00</p>\n            <p style={{ textIndent: \"50px\" }}>\n              {\" \"}\n              e.g. The last two digits of{\" \"}\n              <Tooltip title=\"1700 = 100 x 17\" placement=\"top\">\n                <span>\n                  17<u>00</u>\n                </span>\n              </Tooltip>\n              ,{\" \"}\n              <Tooltip title=\"1800 = 100 x 18\" placement=\"top\">\n                <span>\n                  18<u>00</u>\n                </span>\n              </Tooltip>\n              ,{\" \"}\n              <Tooltip title=\"1900 = 100 x 19\" placement=\"top\">\n                <span>\n                  19<u>00</u>\n                </span>\n              </Tooltip>{\" \"}\n              are all 00\n            </p>\n            <p>\n              A number is a multiple of 400 if it is also a multiple of 100 and\n              all but its last two digits are a multiple of 4\n            </p>\n            <p style={{ textIndent: \"50px\" }}>\n              {\" \"}\n              e.g. All but the last two digits of{\" \"}\n              <Tooltip title=\"20 = 4 x 5\" placement=\"top\">\n                <span>\n                  <u>20</u>00\n                </span>\n              </Tooltip>\n              ,{\" \"}\n              <Tooltip title=\"24 = 4 x 6\" placement=\"top\">\n                <span>\n                  <u>24</u>00\n                </span>\n              </Tooltip>\n              ,{\" \"}\n              <Tooltip title=\"16 = 4 x 4\" placement=\"top\">\n                <span>\n                  <u>16</u>00\n                </span>\n              </Tooltip>{\" \"}\n              are all multiples of 4\n            </p>\n          </div>\n        </div>\n\n        <div className=\"mySlides\">\n          <div className=\"Slide-paragraph-block\">\n            <h2 style={{ color: \"black\" }}>\n              <b>\n                <u>Leap Day</u>\n              </b>\n            </h2>\n            <p>\n              {\" \"}\n              Observe that the last day of February is the 29th on leap years\n              and 28th otherwise:{\" \"}\n            </p>\n            <Calendar\n              minDate={new Date(1700, 0, 1)}\n              view=\"month\"\n              value={new Date(currentYear, 1, 1)}\n              showNeighboringMonth={false}\n              tileDisabled={({ activeStartDate, date, view }) => {\n                const leapDay = isLeapYear(date.getFullYear()) ? 29 : 28;\n                return !(date.getMonth() === 1 && date.getDate() === leapDay);\n              }}\n            />\n          </div>\n        </div>\n\n        <div className=\"mySlides\">\n          <div className=\"Slide-paragraph-block\">\n            <h2 style={{ color: \"black\" }}>\n              <b>\n                <u>Quiz</u>\n              </b>\n            </h2>\n            <p>\n              {\" \"}\n              Enter the last day of February for each of the following years:{\" \"}\n            </p>\n            {allYears.map((year, index) => {\n              return (\n                <span>\n                  <TextField\n                    label={year}\n                    error={\n                      quizFieldValues[index] !== \"\" &&\n                      quizFieldValues[index] !== answers[index].toString()\n                    }\n                    helperText={\n                      quizFieldValues[index] !== \"\" &&\n                      quizFieldValues[index] !== answers[index].toString()\n                        ? \"Incorrect answer.\"\n                        : \"\"\n                    }\n                    onChange={(e) => {\n                      var newQuizFieldValues = quizFieldValues;\n                      newQuizFieldValues[index] = e.target.value;\n\n                      setQuizFieldValues(newQuizFieldValues);\n                      setTest(e.target.value);\n                    }}\n                    id={year}\n                    variant=\"outlined\"\n                  />{\" \"}\n                </span>\n              );\n            })}\n          </div>\n        </div>\n\n        <div\n          className=\"prev\"\n          onClick={() => setSlideIndex(Math.max(slideIndex - 1, 0))}\n        >\n          ❮\n        </div>\n        <div\n          className=\"next\"\n          onClick={() => setSlideIndex(Math.min(slideIndex + 1, 3))}\n        >\n          ❯\n        </div>\n      </div>\n\n      <div className=\"dot-container\">\n        <span className=\"dot\" onClick={() => setSlideIndex(0)}></span>\n        <span className=\"dot\" onClick={() => setSlideIndex(1)}></span>\n        <span className=\"dot\" onClick={() => setSlideIndex(2)}></span>\n        <span className=\"dot\" onClick={() => setSlideIndex(3)}></span>\n      </div>\n    </div>\n  );\n};\n\nexport default Step2Slides;\n","import Step2Slides from \"./slides/Step2Slides\";\n\nconst Step2Page = () => {\n  return (\n    <div className=\"General-app-text-content App-page-with-bar\">\n      <Step2Slides />;\n    </div>\n  );\n};\n\nexport default Step2Page;\n","import { useEffect, useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\n\nimport { allDays } from \"../utils.js\";\n\nconst Step3Slides = () => {\n  const [slideIndex, setSlideIndex] = useState(0);\n  const [test, setTest] = useState(\"\");\n  const [quizFieldValues, setQuizFieldValues] = useState([\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n  ]);\n\n  useEffect(() => {\n    showSlides(slideIndex);\n  });\n\n  const allNumbers = [-14, 15, 1, 12, 3, -6, -24, 21, 7, 2, 27, -19];\n  const answers = allNumbers.map(\n    (number) => allDays[(((3 + number) % 7) + 7) % 7]\n  );\n\n  const showSlides = (n) => {\n    var i;\n    var slides = document.getElementsByClassName(\"mySlides\");\n    var dots = document.getElementsByClassName(\"dot\");\n\n    for (i = 0; i < slides.length; i++) {\n      slides[i].style.display = \"none\";\n    }\n    for (i = 0; i < dots.length; i++) {\n      dots[i].className = dots[i].className.replace(\" active\", \"\");\n    }\n    slides[slideIndex].style.display = \"block\";\n    dots[slideIndex].className += \" active\";\n  };\n\n  return (\n    <div>\n      <div className=\"slideshow-container\">\n        <div className=\"mySlides\">\n          <div className=\"Slide-paragraph-block\">\n            <h2 style={{ color: \"black\" }}>\n              <b>\n                <u>Modular Arithmetic</u>\n              </b>\n            </h2>\n            <p>\n              {\" \"}\n              The Doomsday algorithm makes use of an arithmetic system called{\" \"}\n              <b>modular arithmetic</b>\n            </p>\n            <p>\n              Put simply, modular arithmetic is the same as regular arithmetic,\n              with the only difference lying in the fact that numbers \"wrap\n              around\" back to 0 upon reaching a certain value called the{\" \"}\n              <b>modulus</b>\n            </p>\n            <p>\n              A familiar example of modular arithmetic can be seen in the\n              12-hour clock, in which the day is divided into two 12-hour\n              periods\n            </p>\n            <p style={{ textIndent: \"50px\" }}>\n              {\" \"}\n              e.g. if the time is 9 PM now, 5 hours from now it will be 2 AM\n              (the modulus in this example is 12)\n            </p>\n            <p>\n              There are seven days of the week that wrap back around to the\n              beginning after each week, making arithmetic modulo 7 very useful\n              for calendar calculations\n            </p>\n            <p>The Doomsday algorithm relies heavily on this property</p>\n          </div>\n        </div>\n\n        <div className=\"mySlides\">\n          <div className=\"Slide-paragraph-block\">\n            <h2 style={{ color: \"black\" }}>\n              <b>\n                <u>Arithmetic modulo 7</u>\n              </b>\n            </h2>\n            <p>\n              We will use the following notation to denote that the number x is\n              taken modulo 7:\n            </p>\n            <p style={{ textIndent: \"50px\" }}>x % 7</p>\n            <p>\n              To compute the value of this expression, we simply find the\n              remainder when x is divided by 7:\n            </p>\n            <p style={{ textIndent: \"50px\" }}>\n              {\" \"}\n              e.g. The value of 4 % 7 is 4{\" \"}\n              <Tooltip\n                title=\"because 4 divided by 7 is 0, with a remainder of 4\"\n                placement=\"right\"\n              >\n                <span>\n                  (<u>why?</u>)\n                </span>\n              </Tooltip>\n            </p>\n            <p style={{ textIndent: \"50px\" }}>\n              {\" \"}\n              e.g. The value of 38 % 7 is 3{\" \"}\n              <Tooltip\n                title=\"because 38 divided by 7 is 5, with a remainder of 3\"\n                placement=\"right\"\n              >\n                <span>\n                  (<u>why?</u>)\n                </span>\n              </Tooltip>\n            </p>\n            <p style={{ textIndent: \"50px\" }}>\n              {\" \"}\n              e.g. The value of 0 % 7 is 0{\" \"}\n              <Tooltip\n                title=\"because 0 divided by 7 is 0, with a remainder of 0\"\n                placement=\"right\"\n              >\n                <span>\n                  (<u>why?</u>)\n                </span>\n              </Tooltip>\n            </p>\n            <p style={{ textIndent: \"50px\" }}>\n              {\" \"}\n              e.g. The value of -2 % 7 is -2{\" \"}\n              <Tooltip\n                title=\"because -2 divided by 7 is 0, with a remainder of -2\"\n                placement=\"right\"\n              >\n                <span>\n                  (<u>why?</u>)\n                </span>\n              </Tooltip>\n            </p>\n            <p style={{ textIndent: \"50px\" }}>\n              {\" \"}\n              e.g. The value of -29 % 7 is -1{\" \"}\n              <Tooltip\n                title=\"because -29 divided by 7 is -4, with a remainder of -1\"\n                placement=\"right\"\n              >\n                <span>\n                  (<u>why?</u>)\n                </span>\n              </Tooltip>\n            </p>\n          </div>\n        </div>\n\n        <div className=\"mySlides\">\n          <div className=\"Slide-paragraph-block\">\n            <h2 style={{ color: \"black\" }}>\n              <b>\n                <u>Counting with days</u>\n              </b>\n            </h2>\n            <p>\n              Arithmetic modulo 7 allows one to count forwards/backwards from\n              any day of the week quickly\n            </p>\n            <p>\n              For example, to find out what the day of the week is 50 days after\n              Sunday, one can just count 50 % 7 days after Sunday instead\n            </p>\n            <p style={{ textIndent: \"50px\" }}>\n              Since 50 % 7 is 1{\" \"}\n              <Tooltip\n                title=\"because 50 divided by 7 is 7, with a remainder of 1\"\n                placement=\"top\"\n              >\n                <span>\n                  (<u>why?</u>)\n                </span>\n              </Tooltip>\n              , one can instead count 1 day after Sunday and determine that the\n              answer is Monday\n            </p>\n            <p>\n              A similar approach works for counting backwards too, except with\n              the sign changed: to find out what the day of the week is 50 days\n              before Sunday, one can just count 50 % 7 days before Sunday\n              instead\n            </p>\n            <p style={{ textIndent: \"50px\" }}>\n              Since -50 % 7 is -1{\" \"}\n              <Tooltip\n                title=\"because -50 divided by 7 is -7, with a remainder of -1\"\n                placement=\"top\"\n              >\n                <span>\n                  (<u>why?</u>)\n                </span>\n              </Tooltip>\n              , one can instead count 1 day before Sunday and determine that the\n              answer is Saturday\n            </p>\n            <p>A few more examples:</p>\n            <p style={{ textIndent: \"50px\" }}>\n              e.g. 45 days after Thursday is Sunday{\" \"}\n              <Tooltip\n                title=\"because 45 % 7 is 3, and 3 days after Thursday is Sunday\"\n                placement=\"right\"\n              >\n                <span>\n                  (<u>why?</u>)\n                </span>\n              </Tooltip>\n            </p>\n            <p style={{ textIndent: \"50px\" }}>\n              e.g. 17 days before Monday is Friday{\" \"}\n              <Tooltip\n                title=\"because -17 % 7 is -3, and 3 days before Monday is Friday\"\n                placement=\"right\"\n              >\n                <span>\n                  (<u>why?</u>)\n                </span>\n              </Tooltip>\n            </p>\n            <p style={{ textIndent: \"50px\" }}>\n              e.g. 28 days after Tuesday is still Tuesday{\" \"}\n              <Tooltip\n                title=\"because 28 % 7 is 0, and 0 days after Tuesday is still Tuesday\"\n                placement=\"right\"\n              >\n                <span>\n                  (<u>why?</u>)\n                </span>\n              </Tooltip>\n            </p>\n          </div>\n        </div>\n\n        <div className=\"mySlides\">\n          <div className=\"Slide-paragraph-block\">\n            <h2 style={{ color: \"black\" }}>\n              <b>\n                <u>Quiz</u>\n              </b>\n            </h2>\n            <p>\n              Enter what the day of the week is the given number of days after\n              Wednesday:\n            </p>\n            {allNumbers.map((year, index) => {\n              return (\n                <span>\n                  <TextField\n                    label={year}\n                    error={\n                      quizFieldValues[index] !== \"\" &&\n                      quizFieldValues[index].toLowerCase() !==\n                        answers[index].toLowerCase()\n                    }\n                    helperText={\n                      quizFieldValues[index] !== \"\" &&\n                      quizFieldValues[index].toLowerCase() !==\n                        answers[index].toLowerCase()\n                        ? \"Incorrect answer.\"\n                        : \"\"\n                    }\n                    onChange={(e) => {\n                      var newQuizFieldValues = quizFieldValues;\n                      newQuizFieldValues[index] = e.target.value;\n\n                      setQuizFieldValues(newQuizFieldValues);\n                      setTest(e.target.value);\n                    }}\n                    id={year}\n                    variant=\"outlined\"\n                  />{\" \"}\n                </span>\n              );\n            })}\n          </div>\n        </div>\n\n        <div\n          className=\"prev\"\n          onClick={() => setSlideIndex(Math.max(slideIndex - 1, 0))}\n        >\n          ❮\n        </div>\n        <div\n          className=\"next\"\n          onClick={() => setSlideIndex(Math.min(slideIndex + 1, 3))}\n        >\n          ❯\n        </div>\n      </div>\n\n      <div className=\"dot-container\">\n        <span className=\"dot\" onClick={() => setSlideIndex(0)}></span>\n        <span className=\"dot\" onClick={() => setSlideIndex(1)}></span>\n        <span className=\"dot\" onClick={() => setSlideIndex(2)}></span>\n        <span className=\"dot\" onClick={() => setSlideIndex(3)}></span>\n      </div>\n    </div>\n  );\n};\n\nexport default Step3Slides;\n","import Step3Slides from \"./slides/Step3Slides\";\n\nconst Step3Page = () => {\n  return (\n    <div className=\"General-app-text-content App-page-with-bar\">\n      <Step3Slides />;\n    </div>\n  );\n};\n\nexport default Step3Page;\n","import { useEffect, useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\n\nimport { computeDayOfWeek, addLeadingZero } from \"../utils.js\";\n\nconst Step4Slides = () => {\n  const [slideIndex, setSlideIndex] = useState(0);\n  const [test, setTest] = useState(\"\");\n  const [quizFieldValues, setQuizFieldValues] = useState([\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n  ]);\n\n  useEffect(() => {\n    showSlides(slideIndex);\n  });\n\n  const allDates = [\n    [5, 10],\n    [3, 27],\n    [9, 5],\n    [10, 23],\n    [4, 10],\n    [7, 22],\n    [1, 14],\n    [6, 23],\n    [11, 22],\n    [8, 6],\n    [2, 12],\n    [12, 14],\n  ];\n  const answers = allDates.map((date) =>\n    computeDayOfWeek(date[0], date[1], 1873)\n  );\n\n  const showSlides = (n) => {\n    var i;\n    var slides = document.getElementsByClassName(\"mySlides\");\n    var dots = document.getElementsByClassName(\"dot\");\n\n    for (i = 0; i < slides.length; i++) {\n      slides[i].style.display = \"none\";\n    }\n    for (i = 0; i < dots.length; i++) {\n      dots[i].className = dots[i].className.replace(\" active\", \"\");\n    }\n    slides[slideIndex].style.display = \"block\";\n    dots[slideIndex].className += \" active\";\n  };\n\n  return (\n    <div>\n      <div className=\"slideshow-container\">\n        <div className=\"mySlides\">\n          <div className=\"Slide-paragraph-block\">\n            <h2 style={{ color: \"black\" }}>\n              <b>\n                <u>Using Doomsday</u>\n              </b>\n            </h2>\n            <p>\n              {\" \"}\n              The Doomsday for a given year can be combined with counting modulo\n              7 to calculate the day of the week for <b>any</b> date in that\n              year\n            </p>\n            <p>\n              This requires having the doomsdays in each month memorized (see{\" \"}\n              <a href=\"step1\" style={{ textDecoration: \"none\" }}>\n                Doomsdays\n              </a>\n              )\n            </p>\n            <p>\n              For example: given that the Doomsday for 1917 was Wednesday, what\n              day of the week did August 11th, 1917 fall on?\n            </p>\n            <p style={{ textIndent: \"50px\" }}>\n              The memorized doomsday in August is{\" \"}\n              <Tooltip title=\"4/4, 6/6, 8/8, 10/10, 12/12\" placement=\"right\">\n                <span>\n                  <u>August 8th</u>\n                </span>\n              </Tooltip>\n            </p>\n            <p style={{ textIndent: \"50px\" }}>\n              August 11th is 3 days later, meaning it can be found by counting 3\n              days forward from Wednesday\n            </p>\n            <p style={{ textIndent: \"50px\" }}>\n              So August 11th, 1917 was a Saturday{\" \"}\n              <Tooltip\n                title=\"because 3 % 7 is 3, and 3 days after Wednesday is Saturday\"\n                placement=\"right\"\n              >\n                <span>\n                  (<u>why?</u>)\n                </span>\n              </Tooltip>\n            </p>\n            <p>\n              Another example: given that the Doomsday for 2090 is Tuesday, what\n              day of the week will September 2nd, 2090 fall on?\n            </p>\n            <p style={{ textIndent: \"50px\" }}>\n              The memorized doomsday in September is{\" \"}\n              <Tooltip title=\"I work 9-to-5 at 7-11\" placement=\"right\">\n                <span>\n                  <u>September 5th</u>\n                </span>\n              </Tooltip>\n            </p>\n            <p style={{ textIndent: \"50px\" }}>\n              September 2nd is 3 days before, meaning it can be found by\n              counting 3 days backwards from Tuesday\n            </p>\n            <p style={{ textIndent: \"50px\" }}>\n              So September 2nd, 2090 will be a Saturday{\" \"}\n              <Tooltip\n                title=\"because -3 % 7 is -3, and 3 days before Tuesday is Saturday\"\n                placement=\"right\"\n              >\n                <span>\n                  (<u>why?</u>)\n                </span>\n              </Tooltip>\n            </p>\n          </div>\n        </div>\n\n        <div className=\"mySlides\">\n          <div className=\"Slide-paragraph-block\">\n            <h2 style={{ color: \"black\" }}>\n              <b>\n                <u>Quiz</u>\n              </b>\n            </h2>\n            <p>\n              Given that the Doomsday for 1873 was Friday, enter the day of the\n              week for the following dates in that year (dates are of format\n              MM/DD):\n            </p>\n            {allDates.map((date, index) => {\n              return (\n                <span>\n                  <TextField\n                    label={`${addLeadingZero(date[0])}/${addLeadingZero(\n                      date[1]\n                    )}`}\n                    error={\n                      quizFieldValues[index] !== \"\" &&\n                      quizFieldValues[index].toLowerCase() !==\n                        answers[index].toLowerCase()\n                    }\n                    helperText={\n                      quizFieldValues[index] !== \"\" &&\n                      quizFieldValues[index].toLowerCase() !==\n                        answers[index].toLowerCase()\n                        ? \"Incorrect answer.\"\n                        : \"\"\n                    }\n                    onChange={(e) => {\n                      var newQuizFieldValues = quizFieldValues;\n                      newQuizFieldValues[index] = e.target.value;\n\n                      setQuizFieldValues(newQuizFieldValues);\n                      setTest(e.target.value);\n                    }}\n                    id={date}\n                    variant=\"outlined\"\n                  />{\" \"}\n                </span>\n              );\n            })}\n          </div>\n        </div>\n\n        <div\n          className=\"prev\"\n          onClick={() => setSlideIndex(Math.max(slideIndex - 1, 0))}\n        >\n          ❮\n        </div>\n        <div\n          className=\"next\"\n          onClick={() => setSlideIndex(Math.min(slideIndex + 1, 1))}\n        >\n          ❯\n        </div>\n      </div>\n\n      <div className=\"dot-container\">\n        <span className=\"dot\" onClick={() => setSlideIndex(0)}></span>\n        <span className=\"dot\" onClick={() => setSlideIndex(1)}></span>\n      </div>\n    </div>\n  );\n};\n\nexport default Step4Slides;\n","import Step4Slides from \"./slides/Step4Slides\";\n\nconst Step4Page = () => {\n  return (\n    <div className=\"General-app-text-content App-page-with-bar\">\n      <Step4Slides />;\n    </div>\n  );\n};\n\nexport default Step4Page;\n","import { useEffect, useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\n\nimport { computeDayOfWeek, addLeadingZero } from \"../utils.js\";\n\nconst Step5Slides = () => {\n  const [slideIndex, setSlideIndex] = useState(0);\n  const [test, setTest] = useState(\"\");\n  const [quizFieldValues, setQuizFieldValues] = useState([\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n  ]);\n\n  useEffect(() => {\n    showSlides(slideIndex);\n  });\n\n  const currentDate = new Date();\n\n  const allDates = [\n    [5, 10],\n    [3, 27],\n    [9, 5],\n    [10, 23],\n    [4, 10],\n    [7, 22],\n    [1, 14],\n    [6, 23],\n    [11, 22],\n    [8, 6],\n    [2, 12],\n    [12, 14],\n  ];\n  const answers = allDates.map((date) =>\n    computeDayOfWeek(date[0], date[1], currentDate.getFullYear())\n  );\n\n  const showSlides = (n) => {\n    var i;\n    var slides = document.getElementsByClassName(\"mySlides\");\n    var dots = document.getElementsByClassName(\"dot\");\n\n    for (i = 0; i < slides.length; i++) {\n      slides[i].style.display = \"none\";\n    }\n    for (i = 0; i < dots.length; i++) {\n      dots[i].className = dots[i].className.replace(\" active\", \"\");\n    }\n    slides[slideIndex].style.display = \"block\";\n    dots[slideIndex].className += \" active\";\n  };\n\n  return (\n    <div>\n      <div className=\"slideshow-container\">\n        <div className=\"mySlides\">\n          <div className=\"Slide-paragraph-block\">\n            <h2 style={{ color: \"black\" }}>\n              <b>\n                <u>Using an arbitrary reference date</u>\n              </b>\n            </h2>\n            <p>\n              {\" \"}\n              Just as Doomsday can be used to calculate other dates, any\n              reference date in a year can also be used to calculate the\n              Doomsday for that year as well\n            </p>\n            <p>\n              For example: given that January 17th, 2012 was a Tuesday, what was\n              Doomsday for 2012?\n            </p>\n            <p style={{ textIndent: \"50px\" }}>\n              The memorized doomsday in January is{\" \"}\n              <Tooltip\n                title=\"the 3rd 3 years in 4 and the 4th in the 4th (note that 2012 is a leap year)\"\n                placement=\"right\"\n              >\n                <span>\n                  <u>January 4th</u>\n                </span>\n              </Tooltip>\n            </p>\n            <p style={{ textIndent: \"50px\" }}>\n              Doomsday is 13 days before the given date, meaning it can be found\n              by counting 13 days backwards from Tuesday\n            </p>\n            <p style={{ textIndent: \"50px\" }}>\n              So Doomsday for 2012 was a Wednesday{\" \"}\n              <Tooltip\n                title=\"because -13 % 7 is -6, and 6 days before Tuesday is Wednesday\"\n                placement=\"right\"\n              >\n                <span>\n                  (<u>why?</u>)\n                </span>\n              </Tooltip>\n            </p>\n            <p>\n              Any date in a year can serve as reference to calculate Doomsday\n              for that year\n            </p>\n            <p>\n              This gives a particularly useful corollary: with knowledge of just\n              today's date, one can calculate the day of the week for any date\n              in the current year!\n            </p>\n          </div>\n        </div>\n\n        <div className=\"mySlides\">\n          <div className=\"Slide-paragraph-block\">\n            <h2 style={{ color: \"black\" }}>\n              <b>\n                <u>Quiz</u>\n              </b>\n            </h2>\n            <p>\n              Enter what the day of the week is for each of the given dates in\n              the{\" \"}\n              <Tooltip title={currentDate.getFullYear()} placement=\"top\">\n                <span>\n                  <u>current year</u>\n                </span>\n              </Tooltip>{\" \"}\n              (dates are of format MM/DD):\n            </p>\n            {allDates.map((date, index) => {\n              return (\n                <span>\n                  <TextField\n                    label={`${addLeadingZero(date[0])}/${addLeadingZero(\n                      date[1]\n                    )}`}\n                    error={\n                      quizFieldValues[index] !== \"\" &&\n                      quizFieldValues[index].toLowerCase() !==\n                        answers[index].toLowerCase()\n                    }\n                    helperText={\n                      quizFieldValues[index] !== \"\" &&\n                      quizFieldValues[index].toLowerCase() !==\n                        answers[index].toLowerCase()\n                        ? \"Incorrect answer.\"\n                        : \"\"\n                    }\n                    onChange={(e) => {\n                      var newQuizFieldValues = quizFieldValues;\n                      newQuizFieldValues[index] = e.target.value;\n\n                      setQuizFieldValues(newQuizFieldValues);\n                      setTest(e.target.value);\n                    }}\n                    id={date}\n                    variant=\"outlined\"\n                  />{\" \"}\n                </span>\n              );\n            })}\n          </div>\n        </div>\n\n        <div\n          className=\"prev\"\n          onClick={() => setSlideIndex(Math.max(slideIndex - 1, 0))}\n        >\n          ❮\n        </div>\n        <div\n          className=\"next\"\n          onClick={() => setSlideIndex(Math.min(slideIndex + 1, 1))}\n        >\n          ❯\n        </div>\n      </div>\n\n      <div className=\"dot-container\">\n        <span className=\"dot\" onClick={() => setSlideIndex(0)}></span>\n        <span className=\"dot\" onClick={() => setSlideIndex(1)}></span>\n      </div>\n    </div>\n  );\n};\n\nexport default Step5Slides;\n","import Step5Slides from \"./slides/Step5Slides\";\n\nconst Step5Page = () => {\n  return (\n    <div className=\"General-app-text-content App-page-with-bar\">\n      <Step5Slides />;\n    </div>\n  );\n};\n\nexport default Step5Page;\n","import { useEffect, useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\n\nimport { computeDayOfWeek } from \"../utils.js\";\n\nconst Step3Slides = () => {\n  const [slideIndex, setSlideIndex] = useState(0);\n  const [test, setTest] = useState(\"\");\n  const [quizFieldValues, setQuizFieldValues] = useState([\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n  ]);\n\n  useEffect(() => {\n    showSlides(slideIndex);\n  });\n\n  const allCenturies = [17, 18, 19, 20];\n  const answers = allCenturies.map((century) =>\n    computeDayOfWeek(8, 8, century * 100)\n  );\n  console.log(answers);\n\n  const showSlides = (n) => {\n    var i;\n    var slides = document.getElementsByClassName(\"mySlides\");\n    var dots = document.getElementsByClassName(\"dot\");\n\n    for (i = 0; i < slides.length; i++) {\n      slides[i].style.display = \"none\";\n    }\n    for (i = 0; i < dots.length; i++) {\n      dots[i].className = dots[i].className.replace(\" active\", \"\");\n    }\n    slides[slideIndex].style.display = \"block\";\n    dots[slideIndex].className += \" active\";\n  };\n\n  return (\n    <div>\n      <div className=\"slideshow-container\">\n        <div className=\"mySlides\">\n          <div className=\"Slide-paragraph-block\">\n            <h2 style={{ color: \"black\" }}>\n              <b>\n                <u>Anchor Years and their Doomsdays</u>\n              </b>\n            </h2>\n            <p>\n              {\" \"}\n              In order to calculate Doomsday for a year without a reference\n              date, we must memorize Doomsdays for special years called{\" \"}\n              <b>anchor years</b>\n            </p>\n            <p>\n              Put simply, anchor years correspond to the first year in each\n              century\n            </p>\n            <p style={{ textIndent: \"50px\" }}>\n              {\" \"}\n              e.g. 1700, 1800, 1900, 2000, 2100, etc. are all anchor years\n            </p>\n            <p>\n              We will memorize Doomsday for each of the following anchor years:\n            </p>\n            <ul>\n              <li>1700 - Sunday</li>\n              <li>1800 - Friday</li>\n              <li>1900 - Wednesday</li>\n              <li>2000 - Tuesday</li>\n            </ul>\n            <p>This pattern repeats for subsequent anchor years:</p>\n            <p style={{ textIndent: \"50px\" }}>\n              e.g. Doomsday for 2100 is Sunday, 2200 is Friday, 2300 is\n              Wednesday, 2400 is Tuesday etc.\n            </p>\n          </div>\n        </div>\n\n        <div className=\"mySlides\">\n          <div className=\"Slide-paragraph-block\">\n            <h2 style={{ color: \"black\" }}>\n              <b>\n                <u>Quiz</u>\n              </b>\n            </h2>\n            <p>Enter the Doomsday for each of the anchor years:</p>\n            {allCenturies.map((century, index) => {\n              return (\n                <span>\n                  <TextField\n                    label={century * 100}\n                    error={\n                      quizFieldValues[index] !== \"\" &&\n                      quizFieldValues[index].toLowerCase() !==\n                        answers[index].toLowerCase()\n                    }\n                    helperText={\n                      quizFieldValues[index] !== \"\" &&\n                      quizFieldValues[index].toLowerCase() !==\n                        answers[index].toLowerCase()\n                        ? \"Incorrect answer.\"\n                        : \"\"\n                    }\n                    onChange={(e) => {\n                      var newQuizFieldValues = quizFieldValues;\n                      newQuizFieldValues[index] = e.target.value;\n\n                      setQuizFieldValues(newQuizFieldValues);\n                      setTest(e.target.value);\n                    }}\n                    id={century}\n                    variant=\"outlined\"\n                  />{\" \"}\n                </span>\n              );\n            })}\n          </div>\n        </div>\n\n        <div\n          className=\"prev\"\n          onClick={() => setSlideIndex(Math.max(slideIndex - 1, 0))}\n        >\n          ❮\n        </div>\n        <div\n          className=\"next\"\n          onClick={() => setSlideIndex(Math.min(slideIndex + 1, 1))}\n        >\n          ❯\n        </div>\n      </div>\n\n      <div className=\"dot-container\">\n        <span className=\"dot\" onClick={() => setSlideIndex(0)}></span>\n        <span className=\"dot\" onClick={() => setSlideIndex(1)}></span>\n      </div>\n    </div>\n  );\n};\n\nexport default Step3Slides;\n","import Step6Slides from \"./slides/Step6Slides\";\n\nconst Step6Page = () => {\n  return (\n    <div className=\"General-app-text-content App-page-with-bar\">\n      <Step6Slides />;\n    </div>\n  );\n};\n\nexport default Step6Page;\n","import { useEffect, useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\n\nimport Calendar from \"react-calendar\";\n\nimport { computeDayOfWeek } from \"../utils.js\";\n\nconst Step2Slides = () => {\n  const [slideIndex, setSlideIndex] = useState(0);\n  const [test, setTest] = useState(\"\");\n  const [quizFieldValues, setQuizFieldValues] = useState([\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n  ]);\n\n  useEffect(() => {\n    showSlides(slideIndex);\n  });\n\n  const allYears = [\n    1978,\n    1754,\n    1800,\n    2048,\n    1702,\n    1813,\n    2007,\n    1733,\n    1916,\n    2022,\n    1945,\n    2010,\n  ];\n  const answers = allYears.map((year) => computeDayOfWeek(8, 8, year));\n\n  const today = new Date();\n  const currentYear = today.getFullYear();\n\n  const showSlides = (n) => {\n    var i;\n    var slides = document.getElementsByClassName(\"mySlides\");\n    var dots = document.getElementsByClassName(\"dot\");\n\n    for (i = 0; i < slides.length; i++) {\n      slides[i].style.display = \"none\";\n    }\n    for (i = 0; i < dots.length; i++) {\n      dots[i].className = dots[i].className.replace(\" active\", \"\");\n    }\n    slides[slideIndex].style.display = \"block\";\n    dots[slideIndex].className += \" active\";\n  };\n\n  return (\n    <div>\n      <div className=\"slideshow-container\">\n        <div className=\"mySlides\">\n          <div className=\"Slide-paragraph-block\">\n            <h2 style={{ color: \"black\" }}>\n              <b>\n                <u>How the Doomsday changes across years</u>\n              </b>\n            </h2>\n            <p>\n              Consider the following date that falls on Doomsday: August 8th,\n              1900\n            </p>\n            <p style={{ textIndent: \"50px\" }}>\n              From the memorized anchor doomsdays, one knows that this date fell\n              on a Wednesday\n            </p>\n            <p>\n              Now consider the exact same date on the following year: August\n              8th, 1901\n            </p>\n            <p style={{ textIndent: \"50px\" }}>\n              This date is 365 days after August 8th, 1900, meaning it fell on a\n              Thursday{\" \"}\n              <Tooltip\n                title=\"because 365 % 7 is 1, and 1 day after Wednesday is Thursday\"\n                placement=\"right\"\n              >\n                <span>\n                  (<u>why?</u>)\n                </span>\n              </Tooltip>\n            </p>\n            <p style={{ textIndent: \"50px\" }}>\n              Note that the Doomsday advanced by a day between these two years\n            </p>\n            <p>\n              Using similar reasoning, one can conclude that August 8th, 1902\n              was a Friday & August 8th, 1903 was a Saturday\n            </p>\n            <p>Now consider August 8th, 1904</p>\n            <p style={{ textIndent: \"50px\" }}>\n              This date is{\" \"}\n              <Tooltip\n                title=\"keep in mind that 1904 is a leap year, giving an extra leap day on February 29th to account for\"\n                placement=\"top\"\n              >\n                <span>\n                  <u>366</u>\n                </span>\n              </Tooltip>{\" \"}\n              days after August 8th, 1903, meaning it fell on a Monday{\" \"}\n              <Tooltip\n                title=\"because 366 % 7 is 2, and 2 days after Saturday is Monday\"\n                placement=\"right\"\n              >\n                <span>\n                  (<u>why?</u>)\n                </span>\n              </Tooltip>\n            </p>\n            <p style={{ textIndent: \"50px\" }}>\n              Note that the Doomsday advanced by two days between these two\n              years\n            </p>\n            <p>\n              This illustrates a general pattern: the Doomsday advances by one\n              day with each passing year, with an extra day on leap years\n            </p>\n          </div>\n        </div>\n\n        <div className=\"mySlides\">\n          <div className=\"Slide-paragraph-block\">\n            <h2 style={{ color: \"black\" }}>\n              <b>\n                <u>Calculating the Offset</u>\n              </b>\n            </h2>\n            <p>\n              One can calculate the Doomsday for a given year by using the\n              aforementioned pattern to find and add the offset for that year to\n              the corresponding anchor year\n            </p>\n            <p>For example, one can find the Doomsday for 1964 as follows:</p>\n            <p style={{ textIndent: \"50px\" }}>\n              The Doomsday for the corresponding anchor year (1900) is Wednesday\n            </p>\n            <p style={{ textIndent: \"50px\" }}>\n              1964 is 64 years later (with 64 / 4 = 16 leap years in between),\n              meaning the Doomsday advances 80 days{\" \"}\n              <Tooltip\n                title=\"it advances 64 days (one for each year) plus 16 extra days (one for each leap year in between)\"\n                placement=\"top\"\n              >\n                <span>\n                  (<u>why?</u>)\n                </span>\n              </Tooltip>\n            </p>\n            <p style={{ textIndent: \"50px\" }}>\n              Therefore, Doomsday for 1964 is Saturday{\" \"}\n              <Tooltip\n                title=\"because 80 % 7 is 3, and 3 days after Wednesday is Saturday\"\n                placement=\"right\"\n              >\n                <span>\n                  (<u>why?</u>)\n                </span>\n              </Tooltip>\n            </p>\n            <p>\n              As yet another example, one can find the Doomsday for 2021 as\n              follows:\n            </p>\n            <p style={{ textIndent: \"50px\" }}>\n              The Doomsday for the corresponding anchor year (2000) is Tuesday\n            </p>\n            <p style={{ textIndent: \"50px\" }}>\n              2021 is 21 years later (with 21 / 4 = 5 leap years in between),\n              meaning the Doomsday advances 26 days{\" \"}\n              <Tooltip\n                title=\"it advances 21 days (one for each year) plus 5 extra days (one for each leap year in between)\"\n                placement=\"top\"\n              >\n                <span>\n                  (<u>why?</u>)\n                </span>\n              </Tooltip>\n            </p>\n            <p style={{ textIndent: \"50px\" }}>\n              Therefore, Doomsday for 2021 is Sunday{\" \"}\n              <Tooltip\n                title=\"because 26 % 7 is 5, and 5 days after Tuesday is Sunday\"\n                placement=\"right\"\n              >\n                <span>\n                  (<u>why?</u>)\n                </span>\n              </Tooltip>\n            </p>\n          </div>\n        </div>\n\n        <div className=\"mySlides\">\n          <div className=\"Slide-paragraph-block\">\n            <h2 style={{ color: \"black\" }}>\n              <b>\n                <u>Leap Day</u>\n              </b>\n            </h2>\n            <p>\n              {\" \"}\n              Observe that the Doomsday advances by a day each year (and by two\n              days on leap years):{\" \"}\n            </p>\n            <Calendar\n              minDate={new Date(1700, 0, 1)}\n              view=\"month\"\n              value={new Date(currentYear, 7, 1)}\n              showNeighboringMonth={false}\n              tileDisabled={({ activeStartDate, date, view }) => {\n                return !(date.getMonth() === 7 && date.getDate() === 8);\n              }}\n            />\n          </div>\n        </div>\n\n        <div className=\"mySlides\">\n          <div className=\"Slide-paragraph-block\">\n            <h2 style={{ color: \"black\" }}>\n              <b>\n                <u>Quiz</u>\n              </b>\n            </h2>\n            <p> Enter the Doomsday for each of the following years: </p>\n            {allYears.map((year, index) => {\n              return (\n                <span>\n                  <TextField\n                    label={year}\n                    error={\n                      quizFieldValues[index] !== \"\" &&\n                      quizFieldValues[index].toLowerCase() !==\n                        answers[index].toLowerCase()\n                    }\n                    helperText={\n                      quizFieldValues[index] !== \"\" &&\n                      quizFieldValues[index].toLowerCase() !==\n                        answers[index].toLowerCase()\n                        ? \"Incorrect answer.\"\n                        : \"\"\n                    }\n                    onChange={(e) => {\n                      var newQuizFieldValues = quizFieldValues;\n                      newQuizFieldValues[index] = e.target.value;\n\n                      setQuizFieldValues(newQuizFieldValues);\n                      setTest(e.target.value);\n                    }}\n                    id={year}\n                    variant=\"outlined\"\n                  />{\" \"}\n                </span>\n              );\n            })}\n          </div>\n        </div>\n\n        <div\n          className=\"prev\"\n          onClick={() => setSlideIndex(Math.max(slideIndex - 1, 0))}\n        >\n          ❮\n        </div>\n        <div\n          className=\"next\"\n          onClick={() => setSlideIndex(Math.min(slideIndex + 1, 3))}\n        >\n          ❯\n        </div>\n      </div>\n\n      <div className=\"dot-container\">\n        <span className=\"dot\" onClick={() => setSlideIndex(0)}></span>\n        <span className=\"dot\" onClick={() => setSlideIndex(1)}></span>\n        <span className=\"dot\" onClick={() => setSlideIndex(2)}></span>\n        <span className=\"dot\" onClick={() => setSlideIndex(3)}></span>\n      </div>\n    </div>\n  );\n};\n\nexport default Step2Slides;\n","import Step7Slides from \"./slides/Step7Slides\";\n\nconst Step7Page = () => {\n  return (\n    <div className=\"General-app-text-content App-page-with-bar\">\n      <Step7Slides />;\n    </div>\n  );\n};\n\nexport default Step7Page;\n","import {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useRouteMatch,\n} from \"react-router-dom\";\nimport Step1Page from \"./Step1Page\";\nimport Step2Page from \"./Step2Page\";\nimport Step3Page from \"./Step3Page\";\nimport Step4Page from \"./Step4Page\";\nimport Step5Page from \"./Step5Page\";\nimport Step6Page from \"./Step6Page\";\nimport Step7Page from \"./Step7Page\";\n\nconst LearnSections = () => {\n  let match = useRouteMatch();\n  return (\n    <Router>\n      <Switch>\n        <Route path={`${match.path}/step1`}>\n          <Step1Page />\n        </Route>\n        <Route path={`${match.path}/step2`}>\n          <Step2Page />\n        </Route>\n        <Route path={`${match.path}/step3`}>\n          <Step3Page />\n        </Route>\n        <Route path={`${match.path}/step4`}>\n          <Step4Page />\n        </Route>\n        <Route path={`${match.path}/step5`}>\n          <Step5Page />\n        </Route>\n        <Route path={`${match.path}/step6`}>\n          <Step6Page />\n        </Route>\n        <Route path={`${match.path}/step7`}>\n          <Step7Page />\n        </Route>\n        <Route path={match.path}>\n          <TableOfContents className=\"App-page-with-bar\" />\n        </Route>\n      </Switch>\n    </Router>\n  );\n};\n\nconst TableOfContents = () => {\n  return (\n    <div className=\"General-app-content App-page-with-bar\">\n      <h1>Sections</h1>\n      <ol>\n        <li>\n          <strong>Part 1: Calendar Basics</strong>\n          <ul>\n            <LinkListItem text=\"Doomsdays\" urlPath=\"step1\" />\n            <LinkListItem text=\"Leap Years\" urlPath=\"step2\" />\n            <LinkListItem\n              text=\"Modular Arithmetic with days of the week\"\n              urlPath=\"step3\"\n            />\n          </ul>\n        </li>\n        <li>\n          <strong>\n            Part 2: Use the Doomsday to calculate the day of the week for the\n            given month & day\n          </strong>\n          <ul>\n            <LinkListItem\n              text=\"Calculate the day of the week given Doomsday\"\n              urlPath=\"step4\"\n            />\n            <LinkListItem\n              text=\"Calculate the day of the week given any reference date\"\n              urlPath=\"step5\"\n            />\n          </ul>\n        </li>\n        <li>\n          <strong>Part 3: Compute the Doomsday for any year</strong>\n          <ul>\n            <LinkListItem text=\"Doomsdays for Anchor Years\" urlPath=\"step6\" />\n            <LinkListItem\n              text=\"Calculate Doomsday using the offset\"\n              urlPath=\"step7\"\n            />\n          </ul>\n        </li>\n      </ol>\n    </div>\n  );\n};\n\nconst LinkListItem = ({ text, urlPath }) => {\n  return (\n    <li>\n      <Link\n        style={{ color: \"white\", textDecoration: \"underline\" }}\n        to={`/learn/${urlPath}`}\n      >\n        {text}\n      </Link>\n    </li>\n  );\n};\n\nexport default LearnSections;\n","import { useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\n\nimport {\n  addLeadingZero,\n  getRandDate,\n  computeDayOfWeek,\n  allDays,\n} from \"./utils.js\";\n\nconst TrainPage = () => {\n  const [date, setDate] = useState(getRandDate());\n  const [score, setScore] = useState(0);\n  const [highScore, setHighScore] = useState(0);\n  const [lastAnsweredTime, setLastAnsweredTime] = useState(Date.now());\n  const [avgTime, setAvgTime] = useState(0);\n  const [numAnswered, setNumAnswered] = useState(0);\n\n  return (\n    <div className=\"General-app-content App-page-with-bar\">\n      <h4 style={{ color: \"black\" }}>\n        <b>\n          <u>Practice makes perfect</u>\n        </b>\n      </h4>\n      <p>Dates are of the format: MM/DD/YYYY</p>\n      <p>\n        Date: {addLeadingZero(date[0])}/{addLeadingZero(date[1])}/{date[2]}\n      </p>\n\n      <ButtonGroup\n        color=\"gray\"\n        orientation=\"vertical\"\n        aria-label=\"outlined primary button group\"\n      >\n        {allDays.map((dayOfWeek) => (\n          <Button\n            onClick={() => {\n              const day = computeDayOfWeek(...date);\n\n              // Average time calculations\n              const currentTime = Date.now();\n              const timeToAnswer = (currentTime - lastAnsweredTime) / 1000;\n              const newNumAnswered = numAnswered + 1;\n              const newAvgTime =\n                (avgTime * numAnswered + timeToAnswer) / newNumAnswered;\n\n              if (dayOfWeek === day) {\n                const newScore = score + 1;\n\n                if (newScore > highScore) {\n                  setHighScore(newScore);\n                }\n\n                setScore(newScore);\n\n                alert(`CORRECT!\\nTime: ${timeToAnswer}s`);\n              } else {\n                setScore(0);\n                alert(\n                  `INCORRECT!\\nThe correct answer is: ${day}\\nTime: ${timeToAnswer}s`\n                );\n              }\n\n              // Average time updates\n              setLastAnsweredTime(Date.now());\n              setNumAnswered(newNumAnswered);\n              setAvgTime(newAvgTime);\n\n              // console.log((currentTime - lastAnsweredTime) / 1000);\n              // console.log(numAnswered);\n              // console.log(avgTime);\n\n              const newDate = getRandDate();\n              setDate(newDate);\n            }}\n          >\n            {dayOfWeek}\n          </Button>\n        ))}\n      </ButtonGroup>\n      <p\n        style={{\n          position: \"fixed\",\n          bottom: 30,\n          right: 30,\n        }}\n      >\n        SCORE: {score}\n      </p>\n      <p\n        style={{\n          position: \"fixed\",\n          bottom: 0,\n          right: 30,\n        }}\n      >\n        HIGH SCORE: {highScore}\n      </p>\n      <p\n        style={{\n          position: \"fixed\",\n          bottom: 0,\n          left: 30,\n        }}\n      >\n        AVERAGE RESPONSE TIME: {`${avgTime.toFixed(2)} s`}\n      </p>\n    </div>\n  );\n};\n\nexport default TrainPage;\n","const AboutPage = () => {\n  return (\n    <div className=\"General-app-text-content App-page-with-bar\">\n      <div className=\"Paragraph-block\">\n        <h1 style={{ color: \"black\" }}>\n          <b>\n            <u>About</u>\n          </b>\n        </h1>\n        <p>\n          {\" \"}\n          The <b>Doomsday algorithm</b> is a method to mentally compute the day\n          of the week for a given date. This web application is designed to both\n          teach and provide practice to facilitate learning this skill.{\" \"}\n        </p>\n        <p>\n          {\" \"}\n          The 'Learn' mode of the application contains sections of content that\n          teach the algorithm step by step. Some sections also have practice at\n          the end for the content covered in that section. New users who want to\n          learn the algorithm for the first time will want to start with this\n          mode.{\" \"}\n        </p>\n        <p>\n          {\" \"}\n          The 'Train' mode of the application offers practice problems for\n          training the ability to perform the entire algorithm, as well as\n          providing various metrics such as scorekeeping, average response time,\n          etc. Returning users who have already completed the previous mode will\n          want to go here.{\" \"}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default AboutPage;\n","import logo from \"./doomsday_logo.png\";\nimport HomePage from \"./HomePage\";\nimport LearnSections from \"./LearnSections\";\nimport TrainPage from \"./TrainPage\";\nimport AboutPage from \"./AboutPage\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport \"./slides/Slides.css\";\n\nfunction App() {\n  const fullPath = window.location.href;\n  const relativePath = fullPath.replace(/^(?:\\/\\/|[^/]+)*\\//, \"\");\n\n  return (\n    <div>\n      {!(relativePath === \"\" || relativePath === \"/\") && (\n        <AppBar position=\"static\">\n          <Toolbar style={{ background: \"DimGray\" }}>\n            <IconButton\n              edge=\"start\"\n              color=\"inherit\"\n              aria-label=\"menu\"\n            ></IconButton>\n            <a className=\"Info-link\" href=\"/\">\n              <img src={logo} width=\"203px\" height=\"35px\" alt=\"logo\" />\n            </a>\n          </Toolbar>\n        </AppBar>\n      )}\n      <Router>\n        {/* A <Switch> looks through its children <Route>s and\n          renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/learn\">\n            <LearnSections />\n          </Route>\n          <Route path=\"/train\">\n            <TrainPage />\n          </Route>\n          <Route path=\"/about\">\n            <AboutPage />\n          </Route>\n          <Route path=\"/\">\n            <HomePage />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}